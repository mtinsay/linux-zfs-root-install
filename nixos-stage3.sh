#!/bin/bash

# ZFS Root Installation Scripts - NixOS Stage 3: Cleanup (v0.1)
# Copyright (C) 2025 Michael C. Tinsay
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Run this script after installation to clean up and prepare for reboot
#
# ⚠️  AI-GENERATED CODE DISCLAIMER ⚠️
# This script was entirely generated by AI without direct human editing.
# No comprehensive human testing or code review has been performed.
# Thoroughly test in isolated environments and have qualified personnel
# review before using in any production or important system.
# Use at your own risk - AI-generated code may contain subtle bugs.

# Enhanced bash options for better error handling
set -Euo pipefail

# Error handling with line number reporting
error_exit() {
    local exit_code=$?
    echo -e "${RED}ERROR: Script failed at line $1${NC}" >&2
    echo -e "${RED}Command: $2${NC}" >&2
    exit 1
}

# Set up error trap
trap 'error_exit ${LINENO} "$BASH_COMMAND"' ERR

# Load configuration
if [[ ! -f "nixos-config.sh" ]]; then
    echo -e "${RED}ERROR: nixos-config.sh not found!${NC}" >&2
    echo "Please ensure nixos-config.sh is in the same directory as this script." >&2
    exit 1
fi

source nixos-config.sh

# Logging functions
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" >&2
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

# Unmount filesystems
unmount_filesystems() {
    log "Unmounting filesystems..."
    
    # Disable swap if it was enabled
    if [[ -n "$SWAP_PARTITION" ]] && swapon --show | grep -q "$SWAP_PARTITION"; then
        log "Disabling swap: $SWAP_PARTITION"
        swapoff "$SWAP_PARTITION" || warn "Failed to disable swap"
    fi
    
    # Unmount in reverse order
    local mount_points=(
        "$INSTALL_ROOT/boot/efi"
        "$INSTALL_ROOT/boot"
    )
    
    # Add ZFS dataset mount points in reverse order
    local dataset_mounts=()
    for dataset_config in "${ZFS_DATASETS[@]}"; do
        if [[ -z "$dataset_config" ]]; then
            continue
        fi
        
        IFS=':' read -r dataset_name mountpoint options <<< "$dataset_config"
        
        if [[ -z "$dataset_name" || -z "$mountpoint" ]]; then
            continue
        fi
        
        dataset_mounts+=("$INSTALL_ROOT$mountpoint")
    done
    
    # Reverse the array
    for ((i=${#dataset_mounts[@]}-1; i>=0; i--)); do
        mount_points+=("${dataset_mounts[i]}")
    done
    
    # Add root mount point last
    mount_points+=("$INSTALL_ROOT")
    
    # Unmount all mount points
    for mount_point in "${mount_points[@]}"; do
        if mountpoint -q "$mount_point" 2>/dev/null; then
            log "Unmounting: $mount_point"
            if ! umount "$mount_point"; then
                warn "Failed to unmount $mount_point, trying lazy unmount..."
                umount -l "$mount_point" || warn "Lazy unmount also failed for $mount_point"
            fi
        else
            log "Not mounted: $mount_point"
        fi
    done
    
    log "Filesystem unmounting completed"
}

# Export ZFS pools
export_zfs_pools() {
    log "Exporting ZFS pools..."
    
    # Export the root pool
    if zpool list "$POOL_NAME" >/dev/null 2>&1; then
        log "Exporting ZFS pool: $POOL_NAME"
        zpool export "$POOL_NAME"
    else
        log "ZFS pool $POOL_NAME not found or already exported"
    fi
    
    log "ZFS pool export completed"
}

# Aggressive cleanup
aggressive_cleanup() {
    log "Performing aggressive cleanup..."
    
    # Kill any remaining processes that might be using the mount points
    local pids_killed=0
    
    # Find processes using the install root
    if command -v fuser >/dev/null 2>&1; then
        log "Checking for processes using $INSTALL_ROOT..."
        local pids
        pids=$(fuser -m "$INSTALL_ROOT" 2>/dev/null | tr -d '\n' | sed 's/[^0-9]/ /g' | xargs) || true
        
        if [[ -n "$pids" ]]; then
            warn "Found processes using $INSTALL_ROOT: $pids"
            warn "Attempting to terminate processes gracefully..."
            
            for pid in $pids; do
                if [[ -n "$pid" && "$pid" != "$$" ]]; then
                    if kill -TERM "$pid" 2>/dev/null; then
                        log "Sent TERM signal to process $pid"
                        ((pids_killed++))
                    fi
                fi
            done
            
            if [[ $pids_killed -gt 0 ]]; then
                log "Waiting 5 seconds for processes to terminate..."
                sleep 5
                
                # Force kill any remaining processes
                pids=$(fuser -m "$INSTALL_ROOT" 2>/dev/null | tr -d '\n' | sed 's/[^0-9]/ /g' | xargs) || true
                if [[ -n "$pids" ]]; then
                    warn "Force killing remaining processes: $pids"
                    for pid in $pids; do
                        if [[ -n "$pid" && "$pid" != "$$" ]]; then
                            kill -KILL "$pid" 2>/dev/null || true
                        fi
                    done
                fi
            fi
        fi
    fi
    
    log "Aggressive cleanup completed (terminated $pids_killed processes)"
}

# Verify cleanup
verify_cleanup() {
    log "Verifying cleanup..."
    
    # Check if any filesystems are still mounted under INSTALL_ROOT
    local remaining_mounts
    remaining_mounts=$(mount | grep "$INSTALL_ROOT" | wc -l)
    
    if [[ $remaining_mounts -gt 0 ]]; then
        warn "Found $remaining_mounts remaining mount points under $INSTALL_ROOT:"
        mount | grep "$INSTALL_ROOT" | while read -r line; do
            warn "  $line"
        done
    else
        log "All filesystems successfully unmounted"
    fi
    
    # Check ZFS pool status
    if zpool list "$POOL_NAME" >/dev/null 2>&1; then
        warn "ZFS pool $POOL_NAME is still imported"
        zpool status "$POOL_NAME"
    else
        log "ZFS pool successfully exported"
    fi
    
    log "Cleanup verification completed"
}

# Display final status
display_final_status() {
    log "Installation cleanup completed!"
    log ""
    log "=== INSTALLATION SUMMARY ==="
    log "Hostname: $HOSTNAME"
    log "ZFS Pool: $POOL_NAME"
    log "Root Dataset: $ROOT_DATASET_NAME"
    log "Install Root: $INSTALL_ROOT"
    log ""
    log "=== NEXT STEPS ==="
    log "1. Remove the NixOS installation media"
    log "2. Reboot the system: reboot"
    log "3. Boot from the installed system"
    log "4. Log in with the configured user account"
    log ""
    log "=== POST-BOOT VERIFICATION ==="
    log "After booting, verify the installation:"
    log "  - Check ZFS status: zpool status"
    log "  - Check datasets: zfs list"
    log "  - Check system info: nixos-version"
    log ""
    log "=== TROUBLESHOOTING ==="
    log "If the system fails to boot:"
    log "1. Boot from installation media"
    log "2. Import the ZFS pool: zpool import -f $POOL_NAME"
    log "3. Mount the root dataset and check configuration"
    log ""
    
    if [[ -n "$SWAP_PARTITION" ]]; then
        log "=== SWAP CONFIGURATION ==="
        log "Swap partition: $SWAP_PARTITION"
        log "Swap should be automatically enabled on boot"
        log ""
    fi
    
    log "Installation completed successfully!"
}

# Main function
main() {
    local force_cleanup="false"
    local skip_export="false"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -f|--force)
                force_cleanup="true"
                shift
                ;;
            --skip-export)
                skip_export="true"
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  -f, --force       Force aggressive cleanup"
                echo "  --skip-export     Skip ZFS pool export"
                echo "  -h, --help        Show this help message"
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done
    
    log "Starting NixOS ZFS Root Installation - Stage 3 (Cleanup)"
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
    
    # Perform aggressive cleanup if forced or if there are mount issues
    if [[ "$force_cleanup" == "true" ]] || ! umount "$INSTALL_ROOT/boot/efi" 2>/dev/null; then
        aggressive_cleanup
    fi
    
    # Unmount filesystems
    unmount_filesystems
    
    # Export ZFS pools (unless skipped)
    if [[ "$skip_export" != "true" ]]; then
        export_zfs_pools
    else
        log "Skipping ZFS pool export as requested"
    fi
    
    # Verify cleanup
    verify_cleanup
    
    # Display final status
    display_final_status
}

# Run main function with all arguments
main "$@"