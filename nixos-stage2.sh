#!/bin/bash

# ZFS Root Installation Scripts - NixOS Stage 2: Installation (v0.1)
# Copyright (C) 2025 Michael C. Tinsay
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# Run this script to install NixOS
#
# ⚠️  AI-GENERATED CODE DISCLAIMER ⚠️
# This script was entirely generated by AI without direct human editing.
# No comprehensive human testing or code review has been performed.
# Thoroughly test in isolated environments and have qualified personnel
# review before using in any production or important system.
# Use at your own risk - AI-generated code may contain subtle bugs.

# Enhanced bash options for better error handling
set -Euo pipefail

# Error handling with line number reporting
error_exit() {
    local exit_code=$?
    if [[ $exit_code -eq 99 ]]; then
        echo -e "${YELLOW}DEBUG BREAK: Debug break triggered${NC}" >&2
        echo -e "${YELLOW}Installation stopped for debugging purposes${NC}" >&2
        exit 99
    else
        echo -e "${RED}ERROR: Script failed at line $1${NC}" >&2
        echo -e "${RED}Command: $2${NC}" >&2
        exit 1
    fi
}

# Set up error trap
trap 'error_exit ${LINENO} "$BASH_COMMAND"' ERR

# Load configuration
if [[ ! -f "nixos-config.sh" ]]; then
    echo -e "${RED}ERROR: nixos-config.sh not found!${NC}" >&2
    echo "Please ensure nixos-config.sh is in the same directory as this script." >&2
    exit 1
fi

source nixos-config.sh

# Logging functions
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}" >&2
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}" >&2
}

# Debug break function
debug_break() {
    if [[ "$DEBUG" == "true" ]]; then
        warn "DEBUG BREAK: $1"
        warn "Press Enter to continue, or Ctrl+C to abort..."
        read -r
    fi
}

# Verify prerequisites
verify_prerequisites() {
    log "Verifying prerequisites..."
    
    # Check if running as root
    if [[ $EUID -ne 0 ]]; then
        error "This script must be run as root"
        exit 1
    fi
    
    # Check if filesystems are mounted
    if ! mountpoint -q "$INSTALL_ROOT"; then
        error "Root filesystem is not mounted at $INSTALL_ROOT"
        error "Please run nixos-stage1.sh first"
        exit 1
    fi
    
    if ! mountpoint -q "$INSTALL_ROOT/boot"; then
        error "Boot filesystem is not mounted at $INSTALL_ROOT/boot"
        error "Please run nixos-stage1.sh first"
        exit 1
    fi
    
    if ! mountpoint -q "$INSTALL_ROOT/boot/efi"; then
        error "EFI filesystem is not mounted at $INSTALL_ROOT/boot/efi"
        error "Please run nixos-stage1.sh first"
        exit 1
    fi
    
    # Check if NixOS configuration exists
    if [[ ! -f "$INSTALL_ROOT/etc/nixos/configuration.nix" ]]; then
        error "NixOS configuration not found at $INSTALL_ROOT/etc/nixos/configuration.nix"
        error "Please run nixos-stage1.sh first"
        exit 1
    fi
    
    log "Prerequisites verified successfully"
}

# Set up NixOS channels
setup_channels() {
    log "Setting up NixOS channels..."
    
    # Add NixOS channel
    log "Adding NixOS channel: $NIXOS_CHANNEL"
    nix-channel --add "https://nixos.org/channels/$NIXOS_CHANNEL" nixos
    
    # Update channels
    log "Updating NixOS channels..."
    nix-channel --update
    
    log "NixOS channels configured successfully"
}

# Install NixOS
install_nixos() {
    log "Installing NixOS..."
    
    debug_break "About to run nixos-install"
    
    # Install NixOS
    log "Running nixos-install..."
    nixos-install --root "$INSTALL_ROOT" --no-root-passwd
    
    log "NixOS installation completed successfully"
}

# Configure ZFS
configure_zfs() {
    log "Configuring ZFS for NixOS..."
    
    # Set ZFS pool properties
    log "Setting ZFS pool properties..."
    zpool set bootfs="$ROOT_DATASET/root" "$POOL_NAME"
    zpool set cachefile=/etc/zfs/zpool.cache "$POOL_NAME"
    
    # Copy ZFS cache to installed system
    log "Copying ZFS cache to installed system..."
    mkdir -p "$INSTALL_ROOT/etc/zfs"
    cp /etc/zfs/zpool.cache "$INSTALL_ROOT/etc/zfs/"
    
    # Enable ZFS services in the installed system
    log "Configuring ZFS services..."
    chroot "$INSTALL_ROOT" systemctl enable zfs-import-cache.service
    chroot "$INSTALL_ROOT" systemctl enable zfs-mount.service
    chroot "$INSTALL_ROOT" systemctl enable zfs.target
    
    log "ZFS configuration completed"
}

# Final system configuration
final_configuration() {
    log "Performing final system configuration..."
    
    # Update hardware configuration to include ZFS
    log "Updating hardware configuration for ZFS..."
    
    # Generate a new hardware configuration that includes ZFS
    nixos-generate-config --root "$INSTALL_ROOT" --force
    
    # Ensure ZFS is properly configured in hardware-configuration.nix
    if ! grep -q "boot.supportedFilesystems.*zfs" "$INSTALL_ROOT/etc/nixos/hardware-configuration.nix"; then
        log "Adding ZFS support to hardware-configuration.nix..."
        sed -i '/boot.initrd.availableKernelModules/a\  boot.supportedFilesystems = [ "zfs" ];' \
            "$INSTALL_ROOT/etc/nixos/hardware-configuration.nix"
    fi
    
    # Set hostId if not already set
    if ! grep -q "networking.hostId" "$INSTALL_ROOT/etc/nixos/configuration.nix"; then
        local host_id
        host_id=$(head -c 8 /etc/machine-id 2>/dev/null || openssl rand -hex 4)
        log "Setting networking.hostId to $host_id"
        sed -i "/networking.hostName/a\  networking.hostId = \"$host_id\";" \
            "$INSTALL_ROOT/etc/nixos/configuration.nix"
    fi
    
    log "Final system configuration completed"
}

# Cleanup function
cleanup() {
    log "Performing cleanup..."
    
    # Clean up Nix store
    log "Cleaning up Nix store..."
    nix-collect-garbage
    
    log "Cleanup completed"
}

# Main function
main() {
    local debug_param_used="false"
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -D|--debug)
                if [[ "$debug_param_used" == "true" ]]; then
                    error "Debug parameter can only be specified once"
                    exit 1
                fi
                DEBUG="true"
                debug_param_used="true"
                shift
                ;;
            -h|--help)
                echo "Usage: $0 [OPTIONS]"
                echo "Options:"
                echo "  -D, --debug   Enable debug mode with breakpoints"
                echo "  -h, --help    Show this help message"
                exit 0
                ;;
            *)
                error "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done
    
    log "Starting NixOS ZFS Root Installation - Stage 2"
    
    # Verify prerequisites
    verify_prerequisites
    
    # Set up NixOS channels
    setup_channels
    
    # Install NixOS
    install_nixos
    
    # Configure ZFS
    configure_zfs
    
    # Final system configuration
    final_configuration
    
    # Cleanup
    cleanup
    
    log "Stage 2 completed successfully!"
    log "NixOS installation is complete."
    log ""
    log "Next steps:"
    log "1. Reboot the system"
    log "2. Remove the installation media"
    log "3. Boot into your new NixOS ZFS system"
    log ""
    log "Optional: Run nixos-stage3.sh for post-installation cleanup"
}

# Run main function with all arguments
main "$@"